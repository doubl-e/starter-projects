/*********************************************************
 * blockchain.js
 *********************************************************/
const express = require('express');
const crypto = require('crypto');
const path = require('path');

// Define the Block class
class Block {
    constructor(index, timestamp, transactions, previousHash = '') {
        this.index = index;
        this.timestamp = timestamp;
        this.transactions = transactions;  // Must be an array
        this.previousHash = previousHash;
        this.nonce = 0;
        this.hash = this.calculateHash();
    }

    calculateHash() {
        return crypto.createHash('sha256')
            .update(
                this.index +
                this.timestamp +
                JSON.stringify(this.transactions) +
                this.previousHash +
                this.nonce
            )
            .digest('hex');
    }

    mineBlock(difficulty) {
        const target = Array(difficulty + 1).join('0'); // e.g. "00" for difficulty=2
        while (this.hash.substring(0, difficulty) !== target) {
            this.nonce++;
            this.hash = this.calculateHash();
        }
        console.log(`Block mined: ${this.hash}`);
    }
}

// Define the Blockchain class
class Blockchain {
    constructor(difficulty = 2) {
        this.chain = [this.createGenesisBlock()];
        this.difficulty = difficulty;
        this.pendingTransactions = [];
        this.miningReward = 50; // Example reward amount
    }

    createGenesisBlock() {
        // Use an empty array for the genesis blockâ€™s transactions to avoid .map() errors
        return new Block(0, "01/01/2023", [], "0");
    }

    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }

    createTransaction(transaction) {
        this.pendingTransactions.push(transaction);
    }

    minePendingTransactions(minerAddress) {
        const latestBlockHash = this.getLatestBlock().hash;
        const block = new Block(
            this.chain.length,
            Date.now(),
            this.pendingTransactions,
            latestBlockHash
        );

        block.mineBlock(this.difficulty);
        this.chain.push(block);

        // Reset the pending transactions and reward the miner
        this.pendingTransactions = [{
            fromAddress: null,
            toAddress: minerAddress,
            amount: this.miningReward
        }];
    }

    // Return a simplified ledger for the frontend
    getLedger() {
        // Map each block to a user-friendly representation
        return this.chain.map((block) => ({
            Block: block.index,
            Timestamp: new Date(block.timestamp).toLocaleString(),
            Transactions: block.transactions.map((tx) => ({
                From: tx.fromAddress || 'System',
                To: tx.toAddress,
                Amount: tx.amount
            }))
        }));
    }
}

// Initialize the server and blockchain
const app = express();
const port = 3000;
const blockchain = new Blockchain(2);

app.use(express.json());

// Serve static files (your index.html) from the "public" folder
app.use(express.static(path.join(__dirname, 'public')));

// Add a new transaction
app.post('/transaction', (req, res) => {
    const { fromAddress, toAddress, amount } = req.body;
    blockchain.createTransaction({ fromAddress, toAddress, amount });
    res.json({
        message: 'Transaction added successfully',
        pendingTransactions: blockchain.pendingTransactions
    });
});

// Mine pending transactions
app.post('/mine', (req, res) => {
    const { minerAddress } = req.body;
    blockchain.minePendingTransactions(minerAddress);

    res.json({
        message: 'Block mined successfully',
        blockchain: blockchain.getLedger(),
        pendingTransactions: blockchain.pendingTransactions
    });
});

// Get the entire blockchain + pending transactions
app.get('/blockchain', (req, res) => {
    res.json({
        Blockchain: blockchain.getLedger(),
        PendingTransactions: blockchain.pendingTransactions
    });
});

// Start the server
app.listen(port, () => {
    console.log(`Blockchain app running at http://localhost:${port}`);
});

/*********************************************************
 * frontend.html
 *********************************************************/

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Blockchain Simulator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      text-align: center;
    }
    .section {
      margin: 20px 0;
    }
    label {
      display: inline-block;
      width: 100px;
    }
    .transactions, .block {
      border: 1px solid #ccc;
      padding: 10px;
      margin: 10px 0;
    }
    .transactions strong, .block strong {
      display: inline-block;
      width: 80px;
    }
    /* Make timestamp more readable */
    .timestamp {
      display: block;
      margin: 5px 0 10px 0;
      font-size: 0.9em;
      color: #555;
    }
    /* Wallet balances container */
    #walletBalances div {
      margin: 5px 0;
    }
  </style>
</head>
<body>
  <h1>Blockchain Simulator</h1>

  <!-- Add a Transaction -->
  <div class="section">
    <h2>Add a Transaction</h2>
    <form id="transactionForm">
      <label for="from">From:</label>
      <input type="text" id="from" name="from" required><br><br>
      <label for="to">To:</label>
      <input type="text" id="to" name="to" required><br><br>
      <label for="amount">Amount:</label>
      <input type="number" id="amount" name="amount" required><br><br>
      <button type="submit">Add Transaction</button>
    </form>
  </div>

  <!-- Mine Transactions -->
  <div class="section">
    <h2>Mine Transactions</h2>
    <button id="mineButton">Mine Pending Transactions</button>
  </div>

  <!-- Pending Transactions -->
  <div class="section">
    <h2>Pending Transactions</h2>
    <div id="pendingTransactions"></div>
  </div>

  <!-- Blockchain Ledger -->
  <div class="section">
    <h2>Blockchain Ledger</h2>
    <div id="blockchain"></div>
  </div>

  <!-- Wallet Balances -->
  <div class="section">
    <h2>Wallet Balances</h2>
    <div id="walletBalances"></div>
  </div>

  <script>
    // Fetch and display the blockchain data
    async function fetchBlockchain() {
      try {
        const response = await fetch('/blockchain');
        const data = await response.json();

        // Display Pending Transactions
        displayPendingTransactions(data.PendingTransactions);

        // Display Blockchain Ledger
        displayBlockchain(data.Blockchain);

        // Calculate & Display Wallet Balances
        displayWalletBalances(data.Blockchain);
      } catch (err) {
        console.error('Error fetching blockchain:', err);
      }
    }

    // Show pending transactions in UI
    function displayPendingTransactions(pendingTxs) {
      const pendingContainer = document.getElementById('pendingTransactions');
      pendingContainer.innerHTML = '';
      pendingTxs.forEach(tx => {
        const div = document.createElement('div');
        div.className = 'transactions';
        div.innerHTML = `
          <strong>From:</strong> ${tx.fromAddress || 'System'} |
          <strong>To:</strong> ${tx.toAddress} |
          <strong>Amount:</strong> ${tx.amount}
        `;
        pendingContainer.appendChild(div);
      });
    }

    // Show blocks and transactions in UI
    function displayBlockchain(blockchain) {
      const blockchainContainer = document.getElementById('blockchain');
      blockchainContainer.innerHTML = '';
      blockchain.forEach(block => {
        const div = document.createElement('div');
        div.className = 'block';
        div.innerHTML = `
          <strong>Block:</strong> ${block.Block}
          <span class="timestamp">${block.Timestamp}</span>
          <strong>Transactions:</strong>
          <ul>
            ${block.Transactions.map(tx => `
              <li>${tx.From} -> ${tx.To}: ${tx.Amount}</li>
            `).join('')}
          </ul>
        `;
        blockchainContainer.appendChild(div);
      });
    }

    // Compute and display wallet balances
    function displayWalletBalances(blockchain) {
      // Tally all transactions
      const balances = {};
      blockchain.forEach(block => {
        block.Transactions.forEach(tx => {
          if (tx.From !== 'System') {
            if (!balances[tx.From]) balances[tx.From] = 0;
            balances[tx.From] -= tx.Amount;
          }
          if (!balances[tx.To]) balances[tx.To] = 0;
          balances[tx.To] += tx.Amount;
        });
      });

      // Clear old list
      const walletBalancesContainer = document.getElementById('walletBalances');
      walletBalancesContainer.innerHTML = '';

      // Sort addresses alphabetically (optional)
      const sortedAddresses = Object.keys(balances).sort();

      // Display each address balance
      sortedAddresses.forEach(address => {
        const div = document.createElement('div');
        div.textContent = `${address}: ${balances[address]}`;
        walletBalancesContainer.appendChild(div);
      });
    }

    // Handle transaction form submission
    document.getElementById('transactionForm').addEventListener('submit', async (event) => {
      event.preventDefault();
      const from = document.getElementById('from').value;
      const to = document.getElementById('to').value;
      const amount = document.getElementById('amount').value;

      try {
        const response = await fetch('/transaction', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            fromAddress: from,
            toAddress: to,
            amount: parseFloat(amount)
          })
        });
        const data = await response.json();
        alert(data.message || 'Transaction added!');
        fetchBlockchain(); // Refresh UI
      } catch (err) {
        console.error('Error adding transaction:', err);
      }
    });

    // Handle mining
    document.getElementById('mineButton').addEventListener('click', async () => {
      try {
        const response = await fetch('/mine', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ minerAddress: 'miner-address' })
        });
        const data = await response.json();
        alert(data.message || 'Block mined!');
        fetchBlockchain(); // Refresh UI
      } catch (err) {
        console.error('Error mining block:', err);
      }
    });

    // Fetch blockchain data on initial load
    fetchBlockchain();
  </script>
</body>
</html>
